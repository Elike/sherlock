<?php
namespace Sherlock\Template;




/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-05 at 02:37:21.
 */
class TemplateTest extends \PHPUnit_Framework_TestCase
{


    /**
     * @var Template
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Template;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }


	/**
	 * @covers Sherlock\Template\Template::setPath
	 */
	public function testSetPath()
	{
		$this->object->setPath("../../tests/files/testLoadTemplates.yml");
		$this->assertEquals("../../tests/files/testLoadTemplates.yml",$this->object->getPath());
	}

	/**
	 * @covers Sherlock\Template\Template::getPath
	 */
	public function testGetPath()
	{
		$this->object->setPath("../../tests/files/testLoadTemplates.yml");
		$this->assertEquals("../../tests/files/testLoadTemplates.yml",$this->object->getPath());
	}

	/**
	 * @covers Sherlock\Template\Template::getTemplate
	 */
	public function testGetTemplate_EmptyTemplate()
	{
		$this->assertEmpty($this->object->getPath());

		try {
			$this->object->getTemplate();
		} catch (Exception $e ){
			$this->assertInstanceOf('sherlock\Template\NoTemplateLoadedException', $e, "A template must be loaded before it can be returned.");
		}
	}

	/**
	 * @covers Sherlock\Template\Template::getTemplate
	 */
	public function testGetTemplate()
	{
		$this->assertEmpty($this->object->getPath());
		$this->object->load("../../tests/files/testLoadTemplates.yml");
		$this->assertEquals("../../tests/files/testLoadTemplates.yml",$this->object->getPath());


		$template = $this->object->getTemplate();
		$expectedTemplate = array(
			"property" => "value",
			"nested" => array(
				"field1"=>"value",
				"field2"=>":value"
			)
		);

		$this->assertEquals($expectedTemplate, $template);

	}

	/**
	 * @covers Sherlock\Template\Template::load
	 */
	public function testLoad()
	{
		$this->assertEmpty($this->object->getPath());
		$this->object->load("../../tests/files/testLoadTemplates.yml");
		$this->assertEquals("../../tests/files/testLoadTemplates.yml",$this->object->getPath());


	}

    /**
     * @covers Sherlock\Template\Template::load
     */
    public function testLoad_EmptyPath()
    {
		$this->object->setPath("../../tests/files/testLoadTemplates.yml");
		$this->object->load();
		$this->assertEquals("../../tests/files/testLoadTemplates.yml",$this->object->getPath());
    }



	/**
	 * @covers Sherlock\Template\Template::load
	 */
	public function testLoad_MissingPath()
	{

		$this->assertEmpty($this->object->getPath());

		try {
			$this->object->load("../../tests/files/missing.yml");
		} catch (Exception $e ){
			$this->assertInstanceOf('sherlock\Template\FileNotReadableException', $e, "File is not readable or does not exist.");
		}
	}

	/**
	 * @covers Sherlock\Template\Template::load
	 */
	public function testLoad_MissingMissingPath()
	{

		$this->assertEmpty($this->object->getPath());

		try {
			$this->object->load();
		} catch (Exception $e ){
			$this->assertInstanceOf('sherlock\Template\FileNotReadableException', $e, "Template Path must be set");
		}
	}


}
