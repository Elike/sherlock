<?php
/**
 * User: Zachary Tong
 * Date: 2013-02-19
 * Time: 10:04 PM
 * Auto-generated by "generate.tests.php"
 */

namespace sherlock\tests;
use \sherlock\Sherlock;


class QueryTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var \sherlock\sherlock
	 */
	protected $object;
	
	public function __construct()
	{
		/*
		try {
			$sherlock = new \sherlock\sherlock;
			$sherlock->addNode('loopback.com', '9200');
			//Create the index
			$index = $sherlock->index('test123');
			$response = $index->create();
		}
		catch (\Exception $e){}
		*/
	}
	
	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new \sherlock\sherlock;
		$this->object->addNode('loopback.com', '9200');
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		/*
		try{
			$this->object->index('test123')->delete();
		}
		catch(\Exception $e)
		{

		}
		*/
	}


	function assertThrowsException($exception_name, $code) {
		$e = null;
		try{
			$code();
		}catch (\Exception $e) {
			// No more code, we only want to catch the exception in $e
		}

		$this->assertInstanceOf($exception_name, $e);
	}	public function testBool() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->Bool()->must(array(Sherlock::query()->Term()->field("auxillary")->term("auxillary"), Sherlock::query()->Term()->field("auxillary2")->term("auxillary2")))
				->must_not(array(Sherlock::query()->Term()->field("auxillary")->term("auxillary"), Sherlock::query()->Term()->field("auxillary2")->term("auxillary2")))
				->should(array(Sherlock::query()->Term()->field("auxillary")->term("auxillary"), Sherlock::query()->Term()->field("auxillary2")->term("auxillary2")))
				->minimum_number_should_match(3)
				->boost(0.5)
				->disable_coord(3)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testBoosting() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->Boosting()->positive(Sherlock::query()->Term()->field("auxillary")->term("auxillary"))
				->negative(Sherlock::query()->Term()->field("auxillary")->term("auxillary"))
				->negative_boost(0.5)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testConstantScore() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->ConstantScore()->filter(Sherlock::filter()->Term()->field("auxillary")->term("auxillary"))
				->boost(0.5)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testCustomBoostFactor() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->CustomBoostFactor()->query(Sherlock::query()->Term()->field("auxillary")->term("auxillary"))
				->boost_factor(0.5)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testCustomFiltersScore() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->CustomFiltersScore()->query(Sherlock::query()->Term()->field("auxillary")->term("auxillary"))
				->filters(Sherlock::filter()->Term()->field("auxillary")->term("auxillary"))
				->score_mode("testString")
				->max_boost(0.5)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testCustomScore() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->CustomScore()->query(Sherlock::query()->Term()->field("auxillary")->term("auxillary"))
				->params(array(Sherlock::query()->Term()->field("auxillary")->term("auxillary"), Sherlock::query()->Term()->field("auxillary2")->term("auxillary2")))
				->script("testString")
				->lang("testString")
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testDisMax() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->DisMax()->tie_breaker(0.5)
				->boost(0.5)
				->queries(array(Sherlock::query()->Term()->field("auxillary")->term("auxillary"), Sherlock::query()->Term()->field("auxillary2")->term("auxillary2")))
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testField() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->Field()->field("testString")
				->query("testString")
				->boost(0.5)
				->enable_position_increments(3)
				->default_operator("testString")
				->analyzer("testString")
				->allow_leading_wildcard(3)
				->lowercase_expanded_terms(3)
				->fuzzy_min_sim(0.5)
				->fuzzy_prefix_length(3)
				->lenient(3)
				->phrase_slop(3)
				->analyze_wildcard(3)
				->auto_generate_phrase_queries(3)
				->rewrite("testString")
				->quote_analyzer("testString")
				->quote_field_suffix("testString")
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testFilteredQuery() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->FilteredQuery()->query(Sherlock::query()->Term()->field("auxillary")->term("auxillary"))
				->filter(Sherlock::filter()->Term()->field("auxillary")->term("auxillary"))
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testFuzzy() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->Fuzzy()->field("testString")
				->value("testString")
				->boost(0.5)
				->min_similarity(0.5)
				->prefix_length(3)
				->max_expansions(3)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testFuzzyLikeThis() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->FuzzyLikeThis()->fields(array(Sherlock::query()->Term()->field("auxillary")->term("auxillary"), Sherlock::query()->Term()->field("auxillary2")->term("auxillary2")))
				->like_text("testString")
				->max_query_terms(3)
				->min_similarity(0.5)
				->prefix_length(3)
				->boost(0.5)
				->analyzer("testString")
				->ignore_tf("testString")
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testFuzzyLikeThisField() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->FuzzyLikeThisField()->field("testString")
				->like_text("testString")
				->max_query_terms(3)
				->min_similarity(0.5)
				->prefix_length(3)
				->boost(0.5)
				->analyzer("testString")
				->ignore_tf("testString")
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testHasChild() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->HasChild()->type("testString")
				->score_type("testString")
				->query("testString")
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testHasParent() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->HasParent()->parent_type("testString")
				->score_type("testString")
				->query("testString")
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testIds() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->Ids()->type("testString")
				->values(array(Sherlock::query()->Term()->field("auxillary")->term("auxillary"), Sherlock::query()->Term()->field("auxillary2")->term("auxillary2")))
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testIndices() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->Indices()->indices(array(Sherlock::query()->Term()->field("auxillary")->term("auxillary"), Sherlock::query()->Term()->field("auxillary2")->term("auxillary2")))
				->query(Sherlock::query()->Term()->field("auxillary")->term("auxillary"))
				->no_match_query(Sherlock::query()->Term()->field("auxillary")->term("auxillary"))
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testMatch() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->Match()->field("testString")
				->query("testString")
				->boost(0.5)
				->operator("testString")
				->analyzer("testString")
				->fuzziness(0.5)
				->fuzzy_rewrite("testString")
				->lenient(3)
				->max_expansions(3)
				->minimum_should_match(3)
				->prefix_length(3)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testMatchAll() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->MatchAll()->boost(0.5)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testMoreLikeThis() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->MoreLikeThis()->fields(array(Sherlock::query()->Term()->field("auxillary")->term("auxillary"), Sherlock::query()->Term()->field("auxillary2")->term("auxillary2")))
				->like_text("testString")
				->min_term_freq(3)
				->max_query_terms(3)
				->percent_terms_to_match(0.5)
				->stop_words(array(Sherlock::query()->Term()->field("auxillary")->term("auxillary"), Sherlock::query()->Term()->field("auxillary2")->term("auxillary2")))
				->min_doc_freq(3)
				->max_doc_freq(3)
				->min_word_len(3)
				->max_word_len(3)
				->boost_terms(3)
				->boost(0.5)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testMoreLikeThisField() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->MoreLikeThisField()->field(array(Sherlock::query()->Term()->field("auxillary")->term("auxillary"), Sherlock::query()->Term()->field("auxillary2")->term("auxillary2")))
				->like_text("testString")
				->min_term_freq(3)
				->max_query_terms(3)
				->percent_terms_to_match(0.5)
				->stop_words(array(Sherlock::query()->Term()->field("auxillary")->term("auxillary"), Sherlock::query()->Term()->field("auxillary2")->term("auxillary2")))
				->min_doc_freq(3)
				->max_doc_freq(3)
				->min_word_len(3)
				->max_word_len(3)
				->boost_terms(3)
				->boost(0.5)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testNested() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->Nested()->path("testString")
				->score_mode("testString")
				->query(Sherlock::query()->Term()->field("auxillary")->term("auxillary"))
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testPrefix() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->Prefix()->field("testString")
				->value("testString")
				->boost(0.5)
				->analyzer("testString")
				->slop(3)
				->max_expansions(3)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testQueryString() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->QueryString()->query("testString")
				->default_field("testString")
				->boost(0.5)
				->enable_position_increments(3)
				->default_operator("testString")
				->analyzer("testString")
				->allow_leading_wildcard(3)
				->lowercase_expanded_terms(3)
				->fuzzy_min_sim(0.5)
				->fuzzy_prefix_length(3)
				->lenient(3)
				->phrase_slop(3)
				->analyze_wildcard(3)
				->auto_generate_phrase_queries(3)
				->rewrite("testString")
				->quote_analyzer("testString")
				->quote_field_suffix("testString")
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testQueryStringMultiField() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->QueryStringMultiField()->query("testString")
				->fields(array(Sherlock::query()->Term()->field("auxillary")->term("auxillary"), Sherlock::query()->Term()->field("auxillary2")->term("auxillary2")))
				->boost(0.5)
				->enable_position_increments(3)
				->default_operator("testString")
				->analyzer("testString")
				->allow_leading_wildcard(3)
				->lowercase_expanded_terms(3)
				->fuzzy_min_sim(0.5)
				->fuzzy_prefix_length(3)
				->lenient(3)
				->phrase_slop(3)
				->analyze_wildcard(3)
				->auto_generate_phrase_queries(3)
				->rewrite("testString")
				->quote_analyzer("testString")
				->quote_field_suffix("testString")
				->use_dis_max("testString")
				->tie_breaker(3)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testRange() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->Range()->field("testString")
				->from("testString")
				->to("testString")
				->include_lower(true)
				->include_upper(true)
				->boost(0.5)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testTerm() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->Term()->field("testString")
				->term("testString")
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testTerms() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->Terms()->field("testString")
				->term(array(Sherlock::query()->Term()->field("auxillary")->term("auxillary"), Sherlock::query()->Term()->field("auxillary2")->term("auxillary2")))
				->minimum_match(3)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testTopChildren() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->TopChildren()->type("testString")
				->query(Sherlock::query()->Term()->field("auxillary")->term("auxillary"))
				->score("testString")
				->factor(3)
				->incremental_factor(3)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}

	public function testWildcard() 
	{
		$req = $this->object->search();
		$req->index("test123")->type("test");
		$query = Sherlock::query()->Wildcard()->field("testString")
				->value("testString")
				->boost(0.5)
				;
		
		\Analog\Analog::log($query->toJSON(), \Analog\Analog::DEBUG);
		
		$req->query($query);
		$resp = $req->execute();
		
	}
	
}